<!doctype html>
<html lang="en">

<head>
    <!--#include file="inc/header.html"-->
    <!--#include file="inc/global-js.html"-->

    <style>
        div.autoclose {
            position: fixed;
            bottom: 50px;
            left: 5%;
            display: block;
            width: 90%;
            z-index: 999;
        }

        div.toolbar>div {
            text-align: center;
        }

        div.toolbar button.btn-outline-secondary:hover {
            color: #6c757d;
            background-color: rgba(0, 0, 0, 0);
            border-color: #6c757d;
        }

        div.toolbar button.btn {
            margin: 5px;
        }

        div.toolbar button.btn:hover {
            box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.1);
            transform: scale(1.1);
            transition: all 0.1s;
        }

        div.canvas {
            position: relative;
            width: 516px;
            height: 516px;
            border: 2px solid #ccc;
        }

        div.canvas>canvas {
            position: absolute;
            top: 0;
            left: 0;
        }

        div.selected-colors {
            position: relative;
            display: block;
            width: 100px;
            height: 100px;
        }

        div.selected-colors>div {
            border: 1px solid rgba(0, 0, 0, 0.5);
            display: block;
            width: 40px;
            height: 40px;
        }

        div.selected-colors>div.fg-color {
            position: absolute;
            top: 0;
            left: 0;
        }

        div.selected-colors>div.bg-color {
            position: absolute;
            top: 26px;
            left: 26px;
        }

        div.selected-colors>a.switch-color {
            position: absolute;
            display: block;
            width: 20px;
            height: 20px;
            top: 0px;
            left: 44px;
        }

        div.palette {}

        div.palette div.color {
            cursor: pointer;
            display: inline-block;
            border: 1px solid rgba(0, 0, 0, 0.1);
            width: 24px;
            height: 24px;
            margin: 0 10px 15px 0;
        }

        div.palette div.color:hover {
            box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.2);
            transform: scale(1.25);
            transition: all 0.1s;
        }

        div.preview {}

        div.preview img {
            border: 2px solid rgba(0, 0, 0, 0.1);
            width: 100px;
            height: 100px;
            image-rendering: pixelated;
            margin-left: 30px;
            margin-bottom: 10px;
        }

        div.preview button {
            width: 160px;
        }

        .nav-link.active {
            cursor: default;
            border-bottom: 2px solid rgba(0, 0, 0, 0.9);
        }

        a {
            text-decoration: none;
        }

        .x-border {
            border: 1px solid #ced4da;
            border-left: 0.25rem solid #5bc0de;
            border-radius: 0.25rem;
            padding: 1rem;
        }
    </style>

    <script>
        class ToolbarButton {
            key;
            title;
            icon;
            canPressed;

            constructor(key, title, icon, canPressed) {
                this.key = key;
                this.title = title;
                this.icon = icon;
                this.canPressed = canPressed;
            }
        }

        function findMatchedIndexColor(r, g, b, a) {
            if (a < 128) {
                return window.INDEX_COLORS.length - 1;
            }
            let
                diff = 1000.0,
                rgbColors = window.RGB_COLORS,
                matched = 0;
            for (let i = 0; i < rgbColors.length; i++) {
                let
                    rgb = rgbColors[i]
                d = Math.sqrt(Math.pow(rgb[0] - r, 2) + Math.pow(rgb[1] - g, 2) + Math.pow(rgb[2] - b, 2));
                if (diff > d) {
                    diff = d;
                    matched = i;
                }
            }
            return matched;
        }

        function buildPalette() {
            let palette = [];
            for (let i = 0; i < 8; i++) {
                let cc = [];
                for (let j = 0; j < 8; j++) {
                    cc.push(i * 8 + j);
                }
                palette.push(cc);
            }
            return palette;
        }

        function buildCanvasIndexes() {
            let
                defaultColor = window.INDEX_COLORS.length - 2, // white
                indexes = [];
            for (let i = 0; i < 32 * 32; i++) {
                indexes.push(defaultColor);
            }
            return indexes;
        }

        function createTransparentTile() {
            // create transparent tile:
            let offscreen = document.createElement('canvas');
            offscreen.width = 64;
            offscreen.height = 64;
            let g = offscreen.getContext('2d');
            g.fillStyle = '#ffffff';
            g.fillRect(0, 0, 64, 64);
            g.fillStyle = '#cccccc';
            for (let x = 0; x < 64; x += 8) {
                for (let y = 0; y < 64; y += 8) {
                    g.fillRect(x, y, 4, 4);
                }
            }
            for (let x = 4; x < 64; x += 8) {
                for (let y = 4; y < 64; y += 8) {
                    g.fillRect(x, y, 4, 4);
                }
            }
            return offscreen;
        }

        function init_vm() {
            console.log('init vm...');
            let
                btnUndo = new ToolbarButton('undo', 'Undo', 'arrow-counterclockwise'),
                btnRedo = new ToolbarButton('redo', 'Redo', 'arrow-clockwise'),
                btnCopy = new ToolbarButton('copy', 'Copy', 'back'),
                btnPaste = new ToolbarButton('paste', 'Paste', 'clipboard-plus'),
                btnEraser = new ToolbarButton('eraser', 'Eraser', 'eraser-fill', true),
                btnFill = new ToolbarButton('fill', 'Fill', 'paint-bucket', true),
                btnPick = new ToolbarButton('pick', 'Pick Color', 'eyedropper', true),
                btnPencil = new ToolbarButton('pencil', 'Pencil', 'pencil', true),
                btnLine = new ToolbarButton('line', 'Line', 'slash-lg', true),
                btnRect = new ToolbarButton('rect', 'Rectangle', 'square', true),
                btnMoveUp = new ToolbarButton('move_up', 'Move Up', 'arrow-up'),
                btnMoveLeft = new ToolbarButton('move_left', 'Move Left', 'arrow-left'),
                btnMoveRight = new ToolbarButton('move_right', 'Move Right', 'arrow-right'),
                btnMoveDown = new ToolbarButton('move_down', 'Move Down', 'arrow-down'),
                toolbar = [
                    [btnUndo, btnRedo,
                        btnCopy, btnPaste,
                        btnEraser, btnFill,
                        btnPick, btnPencil],
                    // btnLine, btnRect,
                    [btnMoveUp],
                    [btnMoveLeft, btnMoveRight],
                    [btnMoveDown]
                ],
                buttons = [];
            for (let bgroup of toolbar) {
                for (let btn of bgroup) {
                    buttons[btn.key] = btn;
                }
            }
            window.vm = new Vue({
                el: '#vm',
                data: {
                    account: null,
                    undoList: [],
                    redoList: [],
                    toolbar: toolbar,
                    buttons: buttons,
                    canvas: null,
                    pressedButton: btnPencil,
                    palette: buildPalette(),
                    indexTransparent: window.INDEX_COLORS.length - 1,
                    canvasIndexes: buildCanvasIndexes(),
                    fgIndex: window.INDEX_COLORS.indexOf('#000000'),
                    bgIndex: window.INDEX_COLORS.indexOf('#ffffff'),
                    transparentTile: null,
                    transparentTileUrl: null,
                    version: 0
                },
                computed: {
                    transparentIndex: function () {
                        return window.INDEX_COLORS.length - 1;
                    }
                },
                methods: {
                    isDisabled: function (key) {
                        if (key === 'undo') {
                            return this.undoList.length === 0;
                        }
                        if (key === 'redo') {
                            return this.redoList.length === 0;
                        }
                        return false;
                    },
                    createSnapshot: function () {
                        return this.canvasIndexes.slice(0, 1024);
                    },
                    createUndo: function () {
                        let snapshot = this.createSnapshot();
                        this.undoList.push(snapshot);
                        this.redoList = [];
                    },
                    pasteImage: async function () {
                        if (navigator.clipboard) {
                            try {
                                let contents = await navigator.clipboard.read();
                                let foundImage = false;
                                for (const item of contents) {
                                    if (item.types.includes('image/png')) {
                                        console.log('paste png...');
                                        const blob = await item.getType('image/png');
                                        let that = this;
                                        let img = new Image();
                                        img.onload = function () {
                                            console.log('draw canvas...');
                                            let offscreen = document.createElement('canvas');
                                            offscreen.width = 32;
                                            offscreen.height = 32;
                                            let g = offscreen.getContext('2d');
                                            g.drawImage(img, 0, 0, img.width, img.height, 0, 0, 32, 32);
                                            let iData = g.getImageData(0, 0, 32, 32);
                                            that.createUndo();
                                            // find rgba:
                                            let
                                                data = iData.data,
                                                dataLength = data.length;
                                            for (let i = 0; i < dataLength; i += 4) {
                                                let
                                                    r = data[i],
                                                    g = data[i + 1],
                                                    b = data[i + 2],
                                                    a = data[i + 3],
                                                    matchedIndex = findMatchedIndexColor(r, g, b, a);
                                                that.canvasIndexes[i / 4] = matchedIndex;
                                            }
                                            that.drawCanvas();
                                            that.version++;
                                            showTip('Image was pasted from clipboard.');
                                        }
                                        img.src = URL.createObjectURL(blob);
                                        foundImage = true;
                                        break;
                                    }
                                }
                                if (!foundImage) {
                                    showTip('There is no image in clipboard.', true);
                                }
                            } catch (err) {
                                showTip('Your browser does not support read from clipboard.', true);
                            }
                        } else {
                            showTip('Your browser does not support read from clipboard.', true);
                        }
                    },
                    range: function (n) {
                        let r = [];
                        for (let i = 0; i < n; i++) {
                            r.push(i);
                        }
                        return r;
                    },
                    selectColor: function (index, isBg) {
                        if (isBg) {
                            this.bgIndex = index;
                        } else {
                            this.fgIndex = index;
                        }
                    },
                    toolbarButtonClick: function (key) {
                        console.log('button clicked: ' + key);
                        let btn = this.buttons[key];
                        if (btn.canPressed) {
                            if (this.pressedButton === btn) {
                                this.pressedButton = null;
                            } else {
                                this.pressedButton = btn;
                            }
                        } else {
                            let key = btn.key;
                            if (key === 'copy') {
                                try {
                                    if (!window.ClipboardItem) {
                                        throw 'not support';
                                    }
                                    let gifData = 'data:image/gif;base64,' +
                                        base64js.fromByteArray(this.genGIF());
                                    let img = document.createElement('img');
                                    img.width = 32; img.height = 32;
                                    img.onload = function () {
                                        let offscreen = document.createElement('canvas');
                                        offscreen.width = 32;
                                        offscreen.height = 32;
                                        let g = offscreen.getContext('2d');
                                        g.drawImage(img, 0, 0, img.width, img.height, 0, 0, 32, 32);
                                        offscreen.toBlob(blob => navigator.clipboard.write([new ClipboardItem({ 'image/png': blob })]));
                                        showTip('Image was copied to clipboard.');
                                    };
                                    img.src = gifData;
                                } catch (err) {
                                    showTip('Your browser does not support write to clipboard.', true);
                                }
                            }
                            else if (key === 'paste') {
                                this.pasteImage();
                            } else if (key === 'undo') {
                                let current = this.createSnapshot();
                                this.redoList.push(current);
                                this.canvasIndexes = this.undoList.pop();
                                this.drawCanvas();
                                this.version++;
                            } else if (key === 'redo') {
                                let current = this.createSnapshot();
                                this.undoList.push(current);
                                this.canvasIndexes = this.redoList.pop();
                                this.drawCanvas();
                                this.version++;
                            } else if (key.startsWith('move_')) {
                                this.createUndo();
                                let
                                    dir = key.substring(5),
                                    current = this.createSnapshot(),
                                    bgColor = this.bgIndex;
                                if (dir === 'up') {
                                    current = current.slice(32, 1024);
                                    current = current.concat(Array(32).fill(bgColor));
                                } else if (dir === 'down') {
                                    current = current.slice(0, 1024 - 32);
                                    current = Array(32).fill(bgColor).concat(current);
                                } else {
                                    let
                                        fillLeft = dir === 'right',
                                        empty = current.slice(0, 1024);
                                    for (let y = 0; y < 32; y++) {
                                        let offset = y * 32;
                                        if (fillLeft) {
                                            empty[offset] = bgColor;
                                            for (let x = 1; x < 32; x++) {
                                                empty[offset + x] = current[offset + x - 1];
                                            }
                                        } else {
                                            empty[offset + 31] = bgColor;
                                            for (let x = 0; x < 31; x++) {
                                                empty[offset + x] = current[offset + x + 1];
                                            }
                                        }
                                    }
                                    current = empty;
                                }
                                this.canvasIndexes = current;
                                this.drawCanvas();
                                this.version++;
                            }
                        }
                    },
                    switchColor: function () {
                        // switch bg / fg color:
                        let bg = this.bgIndex;
                        this.bgIndex = this.fgIndex;
                        this.fgIndex = bg;
                    },
                    indexColor: function (index) {
                        return window.INDEX_COLORS[index];
                    },
                    pointColorIndex: function (x, y) {
                        return this.canvasIndexes[y * 32 + x];
                    },
                    pointColor: function (x, y) {
                        return this.indexColor(this.pointColorIndex(x, y));
                    },
                    drawCanvas: function () {
                        let
                            x, y,
                            g = this.canvas.getContext('2d');
                        g.imageSmoothingEnabled = false;
                        for (y = 0; y < 32; y++) {
                            for (x = 0; x < 32; x++) {
                                this.drawPoint(x, y, g);
                            }
                        }
                    },
                    drawPoint: function (x, y, g) {
                        let
                            tile = 16,
                            index = this.canvasIndexes[y * 32 + x];
                        if (!g) {
                            g = this.canvas.getContext('2d');
                        }
                        if (index !== this.indexTransparent) {
                            g.fillStyle = window.INDEX_COLORS[index];
                            g.fillRect(x * tile, y * tile, tile, tile);
                        } else {
                            g.putImageData(this.transparentTile, x * tile, y * tile);
                        }
                    },
                    setPoint: function (x, y, isRight) {
                        let
                            index = y * 32 + x,
                            key = this.pressedButton ? this.pressedButton.key : '';
                        console.log(`${key}: ${x}, ${y}`);
                        if (key === 'pencil') {
                            let
                                oldColor = this.canvasIndexes[index],
                                newColor = isRight ? this.bgIndex : this.fgIndex;
                            if (oldColor !== newColor) {
                                this.createUndo();
                                this.canvasIndexes[index] = newColor;
                                this.drawPoint(x, y);
                                this.version++;
                            }
                        } else if (key === 'eraser') {
                            let
                                oldColor = this.canvasIndexes[index],
                                newColor = this.bgIndex;
                            if (oldColor !== newColor) {
                                this.createUndo();
                                this.canvasIndexes[index] = newColor;
                                this.drawPoint(x, y);
                                this.version++;
                            }
                        } else if (key === 'pick') {
                            if (isRight) {
                                this.bgIndex = this.canvasIndexes[index];
                            } else {
                                this.fgIndex = this.canvasIndexes[index];
                            }
                        } else if (key === 'fill') {
                            let
                                fromColorIndex = this.canvasIndexes[index],
                                toColorIndex = isRight ? this.bgIndex : this.fgIndex;
                            if (fromColorIndex !== toColorIndex) {
                                this.createUndo();
                                this.fillCanvas(x, y, fromColorIndex, toColorIndex, []);
                                this.drawCanvas();
                                this.version++;
                            }
                        }
                    },
                    fillCanvas: function (x, y, fromColorIndex, toColorIndex, marks) {
                        // 1st: set current point:
                        let index = y * 32 + x;
                        if (!marks[index] && this.canvasIndexes[index] === fromColorIndex) {
                            this.canvasIndexes[index] = toColorIndex;
                            marks[index] = true;
                            // check top:
                            if (y > 0) {
                                this.fillCanvas(x, y - 1, fromColorIndex, toColorIndex, marks);
                            }
                            // check left:
                            if (x > 0) {
                                this.fillCanvas(x - 1, y, fromColorIndex, toColorIndex, marks);
                            }
                            // check bottom:
                            if (y < 31) {
                                this.fillCanvas(x, y + 1, fromColorIndex, toColorIndex, marks);
                            }
                            // check right:
                            if (x < 31) {
                                this.fillCanvas(x + 1, y, fromColorIndex, toColorIndex, marks);
                            }
                        }
                    },
                    genGIF: function () {
                        let
                            GIF_PIXEL_PREFIX = '2180',
                            GIF_END = '0181003b',
                            GIF_START = '0x' +
                                '47494638396120002000f53f00ffc0c0ffffc0c0ffc000ffc0c0ffff80c0ffc0' +
                                'c0ffffc0ffff8080ffff8080ff8000ff8080ffff0080ffff80c0ff80ffff0000' +
                                'ffff0080ff0000ff4000ffff0080c08080c0ff00ffc00000ffc080c0800000c0' +
                                'c000c0ff8040c0804080ff40c0804040ff804000ff000080800040808080ff80' +
                                '0040ff0080800000ff80000080000080400000ff0000a08000808000ff400000' +
                                '8040000040000040400000800000404000404000800000008080008080408080' +
                                '80408080c0c0c0ffffff11111121ff0b4e45545343415045322e300301000000' +
                                '21f9041100003f002c00000000200020000007';
                        let
                            arr = this.createSnapshot(),
                            gif = GIF_START;
                        for (let y = 0; y < 32; y++) {
                            let line = '';
                            for (let x = 0; x < 32; x++) {
                                let c = arr[y * 32 + x];
                                let hex = (c < 16 ? '0' + c.toString(16) : c.toString(16));
                                line = line + hex;
                            }
                            gif = gif + GIF_PIXEL_PREFIX + line;
                        }
                        gif += GIF_END;
                        return ethers.utils.arrayify(gif);
                    },
                    download: function () {
                        let gifData = 'data:application/octet-stream;base64,' +
                            base64js.fromByteArray(this.genGIF());
                        let a = document.createElement('a');
                        a.href = gifData;
                        a.download = '1024pixels.gif';
                        a.click();
                    },
                    createNFT: async function () {
                        if (!window.vm_wallet.ready) {
                            return showAlert('Error', 'Please connect to wallet with ' + window.CHAIN_NAME + ' !');
                        }
                        let
                            arr = this.createSnapshot(),
                            hexData = '0x';
                        for (let i = 0; i < 1024; i++) {
                            let c = arr[i];
                            hexData = hexData + (c < 16 ? '0' + c.toString(16) : c.toString(16));
                        }
                        let tokenId = ethers.utils.keccak256(hexData);
                        // check token exist:
                        let loading = showLoading('Prepare Create NFT', 'Check NFT token ID...');
                        try {
                            let contract = new ethers.Contract(window.PIXELS_ADDR, window.PIXELS_ABI, window.getWeb3Provider().getSigner());
                            let exist = await contract.tokenExist(tokenId);
                            if (exist) {
                                throw 'This pixels art is already minted.';
                            }
                            loading.setMessage('Get mint fee...');
                            let fee = await contract.mintFee();
                            loading.setMessage('Please sign the mint transaction in MetaMask...');
                            let tx = await contract.mint(hexData, { value: fee });
                            loading.setMessage('Please wait for blockchain confirmation...');
                            await tx.wait(1);
                            loading.close();
                            let
                                urlText = window.OPENSEA_URL + '0x...',
                                url = window.OPENSEA_URL + window.PIXELS_ADDR + '/' + ethers.BigNumber.from(tokenId).toString();
                            showInfo('Success', '<p>The 1024 Pixels Art was created successfully!</p><p>You should find the NFT on OpenSea shortly: </p><p><a target="_blank" href="' +
                                url + '">' + urlText + ' <i class="bi bi-box-arrow-up-right"></i></a></p>');
                        } catch (err) {
                            loading.close();
                            return showAlert('Error', translateError(err));
                        }
                    },
                    accountChanged: function (account) {
                        this.account = account;
                    }
                },
                watch: {
                    version: function (val, oldVal) {
                        let
                            last = val,
                            that = this;
                        setTimeout(function () {
                            if (that.version === last) {
                                // version not changed
                                $('#imgPreview').attr('src', that.canvas.toDataURL());
                                $('#linkFavicon').attr('href', that.canvas.toDataURL("image/x-icon"));
                            }
                        }, 1000);
                        setTimeout(function () {
                            if (that.version === last) {
                                // version not changed
                                let data = JSON.stringify(that.createSnapshot());
                                localStorage.setItem('image', data);
                                console.log('image saved at version ' + last);
                            }
                        }, 3000);
                    }
                },
                mounted: function () {
                    // create transparent tile:
                    let offscreen = createTransparentTile();
                    this.transparentTile = offscreen.getContext('2d').getImageData(0, 0, 16, 16);
                    this.transparentTileUrl = 'url(' + offscreen.toDataURL() + ')';

                    // draw grid on gridCanvas:
                    {
                        let
                            x, y,
                            size = 512,
                            tile = size >> 5,
                            gridCanvas = document.getElementById('gridCanvas'),
                            g = gridCanvas.getContext('2d');
                        g.imageSmoothingEnabled = false;
                        g.fillStyle = 'rgba(0,0,0,0)';
                        g.fillRect(0, 0, size, size);

                        // draw lines:
                        g.strokeStyle = 'rgba(0,0,0,0.1)';
                        g.lineWidth = 1;
                        g.beginPath();
                        for (y = 1; y < 32; y++) {
                            g.moveTo(0, y * tile);
                            g.lineTo(size, y * tile);
                        }
                        for (x = 1; x < 32; x++) {
                            g.moveTo(x * tile, 0);
                            g.lineTo(x * tile, size);
                        }
                        g.closePath();
                        g.stroke();

                        // init mouse event:
                        let that = this;
                        gridCanvas.addEventListener('contextmenu', (event) => {
                            event.preventDefault();
                        });
                        let mvFn = (event) => {
                            let
                                b = event.buttons,
                                ox = event.offsetX,
                                oy = event.offsetY;
                            if (ox >= 0 && oy >= 0 && b > 0) {
                                let
                                    x = (ox & 0x1ff) >> 4,
                                    y = (oy & 0x1ff) >> 4;
                                that.setPoint(x, y, b === 2);
                            }
                        };
                        gridCanvas.addEventListener('mousemove', mvFn);
                        gridCanvas.addEventListener('mousedown', mvFn);
                        gridCanvas.addEventListener('mouseup', (event) => {
                            console.log(event.offsetX, event.offsetY, event.buttons);
                        });
                    }
                    // try load storage:
                    let data = localStorage.getItem('image');
                    if (data) {
                        try {
                            let
                                hasError = false,
                                arr = JSON.parse(data);
                            if (Array.isArray(arr) && arr.length === 1024) {
                                for (let i = 0; i < 1024; i++) {
                                    let n = arr[i];
                                    if (!Number.isInteger(n)) {
                                        hasError = true;
                                        break;
                                    }
                                    if (n < 0 || n >= 64) {
                                        hasError = true;
                                        break;
                                    }
                                }
                                if (!hasError) {
                                    this.canvasIndexes = arr;
                                    console.log('load image from storage ok.');
                                }
                            }
                        } catch (err) {
                            console.error('failed load from storage.', err);
                        }
                    }
                    this.canvas = document.getElementById('mainCanvas');
                    this.drawCanvas();
                    this.version++;
                }
            });
        }
    </script>
</head>

<body>
    <!--#include file="inc/dialog.html"-->
    <!--#include file="inc/nav.html"-->

    <div id="vm" class="container">
        <div class="row">
            <div class="col">
                <div class="x-border">
                    <button onclick="$(this).parent().hide()" type="button" class="btn-close float-end"></button>
                    <h5>What is 1024 Pixels Art?</h5>
                    <p>1024 Pixels Art is NFTs that store a 32 x 32 = 1024 pixels as GIF image 100% stores on chain.
                        No external file is stored on any 3rd-party storage which means all 1024 Pixels Art NFT are
                        immutable. You can use professional software such as Photoshop to create, then paste and
                        create NFT art!</p>
                </div>
            </div>
        </div>

        <!-- pixel art -->
        <div class="row mt-4">
            <div class="col">
                <div class="container" style="width:760px;">
                    <div class="row g-0">
                        <div class="col-12 col-md-2 mb-2">
                            <!-- toolbar -->
                            <div class="toolbar">
                                <div v-for="bgroup in toolbar">
                                    <button v-for="b in bgroup" type="button" class="btn"
                                        v-on:click="toolbarButtonClick(b.key)" v-bind:id="'btn-'+b.key"
                                        v-bind:title="b.title" v-bind:disabled="isDisabled(b.key)"
                                        v-bind:class="{'btn-secondary':b===pressedButton,'btn-outline-secondary':b!==pressedButton}">
                                        <i v-bind:class="'bi bi-' + b.icon"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-md-10">
                            <!-- canvas -->
                            <div class="canvas">
                                <canvas id="mainCanvas" width="512" height="512"></canvas>
                                <canvas id="gridCanvas" width="512" height="512"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="row g-0 mt-4">
                        <div class="col-3 col-md-2">
                            <!-- fg / bg color -->
                            <div class="selected-colors">
                                <div class="bg-color" v-bind:title="indexColor(bgIndex).toUpperCase()"
                                    v-bind:style="{'background-color':indexColor(bgIndex),'background-image':bgIndex===transparentIndex?transparentTileUrl:'none'}">
                                </div>
                                <div class="fg-color" v-bind:title="indexColor(fgIndex).toUpperCase()"
                                    v-bind:style="{'background-color':indexColor(fgIndex),'background-image':fgIndex===transparentIndex?transparentTileUrl:'none'}">
                                </div>
                                <a v-on:click="switchColor" href="#0" class="switch-color"><i
                                        class="bi bi-arrow-left-right"></i></a>
                            </div>
                        </div>
                        <div class="col-9 col-md-5">
                            <!-- palette -->
                            <div class="palette">
                                <div v-for="colors in palette">
                                    <div v-for="color in colors" class="color"
                                        v-bind:title="indexColor(color).toUpperCase()" v-bind:index="color"
                                        v-on:click="selectColor(color, false)"
                                        v-on:contextmenu.prevent="selectColor(color, true)"
                                        v-bind:style="{'background-color':indexColor(color),'background-image':color===transparentIndex?transparentTileUrl:'none'}">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-md-5">
                            <!-- preview -->
                            <div class="preview">
                                <img id="imgPreview">
                                <div class="mt-2">
                                    <button v-on:click="download" type="button" class="btn btn-outline-secondary">
                                        <i class="bi bi-download"></i> Download
                                    </button>
                                </div>
                                <div class="mt-2">
                                    <button v-on:click="createNFT" type="button" class="btn btn-primary">
                                        <i class="bi bi-image"></i> Create NFT
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--#include file="inc/footer.html"-->
</body>

</html>