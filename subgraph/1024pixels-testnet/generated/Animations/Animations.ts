// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
    ethereum,
    Address,
    BigInt
} from "@graphprotocol/graph-ts";

export class Transfer extends ethereum.Event {
    get params(): Transfer__Params {
        return new Transfer__Params(this);
    }
}

export class Transfer__Params {
    _event: Transfer;

    constructor(event: Transfer) {
        this._event = event;
    }

    get from(): Address {
        return this._event.parameters[0].value.toAddress();
    }

    get to(): Address {
        return this._event.parameters[1].value.toAddress();
    }

    get tokenId(): BigInt {
        return this._event.parameters[2].value.toBigInt();
    }
}

export class Animations__imageDataResultValue0Struct extends ethereum.Tuple {
    get interval(): i32 {
        return this[0].toI32();
    }

    get tokenIds(): Array<BigInt> {
        return this[1].toBigIntArray();
    }
}

export class Animations extends ethereum.SmartContract {
    static bind(address: Address): Animations {
        return new Animations("Animations", address);
    }

    imageData(tokenId: BigInt): Animations__imageDataResultValue0Struct {
        let result = super.call(
            "imageData",
            "imageData(uint256):((uint8,uint256[]))",
            [ethereum.Value.fromUnsignedBigInt(tokenId)]
        );

        return changetype<Animations__imageDataResultValue0Struct>(
            result[0].toTuple()
        );
    }

    try_imageData(
        tokenId: BigInt
    ): ethereum.CallResult<Animations__imageDataResultValue0Struct> {
        let result = super.tryCall(
            "imageData",
            "imageData(uint256):((uint8,uint256[]))",
            [ethereum.Value.fromUnsignedBigInt(tokenId)]
        );
        if (result.reverted) {
            return new ethereum.CallResult();
        }
        let value = result.value;
        return ethereum.CallResult.fromValue(
            changetype<Animations__imageDataResultValue0Struct>(value[0].toTuple())
        );
    }

    imageURI(tokenId: BigInt): string {
        let result = super.call("imageURI", "imageURI(uint256):(string)", [
            ethereum.Value.fromUnsignedBigInt(tokenId)
        ]);

        return result[0].toString();
    }

    try_imageURI(tokenId: BigInt): ethereum.CallResult<string> {
        let result = super.tryCall("imageURI", "imageURI(uint256):(string)", [
            ethereum.Value.fromUnsignedBigInt(tokenId)
        ]);
        if (result.reverted) {
            return new ethereum.CallResult();
        }
        let value = result.value;
        return ethereum.CallResult.fromValue(value[0].toString());
    }
}
